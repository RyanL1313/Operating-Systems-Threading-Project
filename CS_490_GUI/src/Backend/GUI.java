/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Backend;

import java.util.PriorityQueue;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;

/**
 * This JFrame shows the processes as their execution is being simulated. Different text panes are present to update the
 * stats of the processes.
 *
 * @author Sarah Pierson
 */
public class GUI extends javax.swing.JFrame {
    PriorityQueue<Process> pqc_temp;
    int CPU;
    String execStatus;
    double timeRemaining;
    boolean alreadyStarted = false;
    boolean paused = false;
    int pollRateVal = 0;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        StatusPane1.setText("CPU: " + CPU + "\nexec: " + execStatus + "\ntime remaining: " + timeRemaining);
        StatusPane2.setText("CPU: " + CPU + "\nexec: " + execStatus + "\ntime remaining: " + timeRemaining);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StartButton = new javax.swing.JButton();
        PauseButton = new javax.swing.JButton();
        SystemStatus = new javax.swing.JLabel();
        pollRateInput = new javax.swing.JTextField("1000");
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        StatusPane1 = new javax.swing.JTextPane();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Table2 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        StatusPane2 = new javax.swing.JTextPane();
        jLabel5 = new javax.swing.JLabel();
        currentThroughputInput = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        StartButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        StartButton.setText("Start System");
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        PauseButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        PauseButton.setText("Pause System");
        PauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PauseButtonActionPerformed(evt);
            }
        });

        SystemStatus.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        SystemStatus.setText("System Status");

        pollRateInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pollRateInputActionPerformed(evt);
            }
        });

        jLabel3.setText("1 time unit =");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Waiting Process Queue");

        Table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Process Name", "Service Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table1.setRowHeight(30);
        Table1.getTableHeader().setReorderingAllowed(false);
        Table1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                Table1AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(Table1);

        StatusPane1.setEditable(false);
        jScrollPane2.setViewportView(StatusPane1);

        jLabel4.setText("ms");

        Table2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Process Name", "Arrival Time", "Service Time", "Finish Time", "TAT", "nTAT"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(Table2);

        StatusPane2.setEditable(false);
        jScrollPane5.setViewportView(StatusPane2);

        jLabel5.setText("Current Throughput:");

        currentThroughputInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentThroughputInputActionPerformed(evt);
            }
        });

        jLabel6.setText("processes/unit of time");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(currentThroughputInput, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(pollRateInput, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(StartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SystemStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SystemStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(pollRateInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(currentThroughputInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Sets the temporary process queue to a copy of the one created in Simulation.
     * Used for initially populating the table of processes.
     * @param input The priority queue of processes
     */
    void set_pqc(PriorityQueue<Process> input)
    {
        pqc_temp = new PriorityQueue<>(input);
    }

    void updateRowTable2(int row, Process processInput, int finishTime)
    {

        DefaultTableModel model = (DefaultTableModel) Table2.getModel();
        String processID = processInput.getID();
        int arrivalTime = processInput.getArrTime();
        int serviceTime = processInput.getSerTime();
        int TAT = finishTime - arrivalTime;
        float nTAT = (float)TAT / (float)serviceTime;
        String sNTAT = String.format("%.3f", nTAT); // The nTAT to three decimal places

        if (row <= 5)
        {
            model.setValueAt(processID, row, 0);
            model.setValueAt(arrivalTime, row, 1);
            model.setValueAt(serviceTime, row, 2);
            model.setValueAt(finishTime, row, 3);
            model.setValueAt(TAT, row, 4);
            model.setValueAt(sNTAT, row, 5);
        }
        else
        {
            Object[] rowInput = {processID, arrivalTime, serviceTime, finishTime, TAT, sNTAT};
            model.addRow(rowInput);
        }

    }
    
    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
        // TODO add your handling code here:
        SystemStatus.setText("System Running");

        StartButton.setEnabled(false);
        PauseButton.setEnabled(true);

        pollRateVal = Integer.parseInt(pollRateInput.getText());

        if (alreadyStarted == false)
        {
            DefaultTableModel model = (DefaultTableModel) Table1.getModel();

            int pqc_temp_size = pqc_temp.size();

            for (int i = 0; i < pqc_temp_size; i++)
            {
                Process nextProcess = pqc_temp.poll();
                String processID = nextProcess.getID();
                String serviceTime = "" + nextProcess.getSerTime();

                if (i < 7) // Initially, the table has 7 rows
                {
                    model.setValueAt(processID, i, 0);
                    model.setValueAt(serviceTime, i, 1);
                }
                else
                {
                    Object[] rowInput = {processID, serviceTime};
                    model.addRow(rowInput);
                }

            }
            alreadyStarted = true;
        }
        else
        {
            paused = false;
        }
       
        
    }//GEN-LAST:event_StartButtonActionPerformed

    private void PauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PauseButtonActionPerformed
        // TODO add your handling code here:
        SystemStatus.setText("System Paused");
        paused = true;
        PauseButton.setEnabled(false);
        StartButton.setEnabled(true);
    }//GEN-LAST:event_PauseButtonActionPerformed

    private void Table1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_Table1AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_Table1AncestorAdded

    private void pollRateInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pollRateInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pollRateInputActionPerformed

    private void currentThroughputInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentThroughputInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_currentThroughputInputActionPerformed

    public int getPollRateVal() {
        return pollRateVal;
    }

    public boolean getPauseState(){
        return paused;
    }

    /**
     * Removes a process from the wait queue table by searching for a process ID and removing the associated row.
     * @param processID The ID of the process
     */
    public void removeProcessFromTable(String processID)
    {
        int numRows = Table1.getRowCount();

        for(int i = 0; i < numRows; i++) {
            if (Table1.getValueAt(i,0).toString().equals(processID)) {
                // Removes row from table and breaks
                ((DefaultTableModel)Table1.getModel()).removeRow(i);
                break;
            }
        }
    }

    /**
     * Displays the current throughput of the system.
     * @param input The throughput
     */
    public void setCurrentThroughput(float input)
    {
        currentThroughputInput.setText(String.format("%.3f", input));
    }

    /**
     * Updates the displayed stats for the first CPU.
     * @param processID The process's ID
     * @param CPU The CPU number
     * @param timeRemaining The number of time units left for this process to finish
     */
    public void updateCPUStats(String processID, int CPU, int timeRemaining)
    {
        StyledDocument document = (StyledDocument) StatusPane1.getDocument();
        // Cleaning Document
        try {
            document.remove(0, document.getLength());
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
        // Updating new information
        try {
            document.insertString(document.getLength(), "CPU: " + CPU + "\nexec: " + processID + "\ntime remaining: " + timeRemaining + " units", null);
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }

    /**
     * Updates the displayed stats for the second CPU.
     * @param processID The process's ID
     * @param CPU The CPU number
     * @param timeRemaining The number of time units left for this process to finish
     */
    public void updateCPUStats2(String processID, int CPU, int timeRemaining)
    {
        StyledDocument document = (StyledDocument) StatusPane2.getDocument();
        // Cleaning Document
        try {
            document.remove(0, document.getLength());
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
        // Updating new information
        try {
            document.insertString(document.getLength(), "CPU: " + CPU + "\nexec: " + processID + "\ntime remaining: " + timeRemaining + " units", null);
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }

    /**
     * When there are no more processes for the CPU to grab, the respective CPU status pane will
     * display the finished message.
     *
     * @param CPU The CPU that has finished
     */
    public void displayCPUFinishMessage(int CPU)
    {
        StyledDocument document = null;

        if (CPU == 1) // CPU 1 was passed in as a parameter
            document = (StyledDocument) StatusPane1.getDocument();
        else if (CPU == 2) // CPU 2 was passed in as a parameter
            document = (StyledDocument) StatusPane2.getDocument();

        // Cleaning Document
        try {
            document.remove(0, document.getLength());
        } catch (BadLocationException e) {
            e.printStackTrace();
        }

        // Print the finished message
        if (document != null) {
            try {
                document.insertString(document.getLength(), "CPU: " + CPU + "\n\nNo more processes!", null);
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton PauseButton;
    private javax.swing.JButton StartButton;
    private javax.swing.JTextPane StatusPane1;
    private javax.swing.JTextPane StatusPane2;
    private javax.swing.JLabel SystemStatus;
    private javax.swing.JTable Table1;
    private javax.swing.JTable Table2;
    private javax.swing.JTextField currentThroughputInput;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField pollRateInput;
    // End of variables declaration//GEN-END:variables
}
